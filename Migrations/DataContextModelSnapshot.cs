// <auto-generated />
using System;
using APMApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace APMApi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("APMApi.Models.Database.FeedBackModels.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<int>("Note")
                        .HasColumnType("integer")
                        .HasColumnName("Note");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("feedbacks");
                });

            modelBuilder.Entity("APMApi.Models.Database.FeedBackModels.FeedBackApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<int>("Note")
                        .HasColumnType("integer")
                        .HasColumnName("Note");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("feedbacks_application");
                });

            modelBuilder.Entity("APMApi.Models.Database.FeedBackModels.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("APMApi.Models.Database.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("path");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("APMApi.Models.Database.RequestModels.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deadline");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("APMApi.Models.Database.RequestModels.Response", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("content");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("request_id");

                    b.Property<Guid?>("RequestId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("response_status_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("RequestId1");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("APMApi.Models.Database.RequestModels.ResponseStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("ResponseStatuses");
                });

            modelBuilder.Entity("APMApi.Models.Database.RequestModels.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("APMApi.Models.Database.SkillModels.ObjectCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("PictureId")
                        .HasColumnType("uuid")
                        .HasColumnName("picture_id");

                    b.Property<Guid?>("PictureId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("PictureId");

                    b.HasIndex("PictureId1");

                    b.ToTable("ObjectCategories");
                });

            modelBuilder.Entity("APMApi.Models.Database.SkillModels.ObjectModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("PictureId")
                        .HasColumnType("uuid")
                        .HasColumnName("picture_id");

                    b.Property<Guid?>("PictureId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PictureId");

                    b.HasIndex("PictureId1");

                    b.ToTable("Objects");
                });

            modelBuilder.Entity("APMApi.Models.Database.SkillModels.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("PictureId")
                        .HasColumnType("uuid")
                        .HasColumnName("picture_id");

                    b.Property<Guid?>("PictureId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.HasIndex("PictureId1");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("APMApi.Models.Database.UserModels.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Floor")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("floor");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("longitude");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("street");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("APMApi.Models.Database.UserModels.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uuid")
                        .HasColumnName("response_id");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique();

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("APMApi.Models.Database.UserModels.Preference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("ByMail")
                        .HasColumnType("boolean")
                        .HasColumnName("by_mail");

                    b.Property<bool>("ByNotifications")
                        .HasColumnType("boolean")
                        .HasColumnName("by_notifications");

                    b.Property<bool>("ByPhone")
                        .HasColumnType("boolean")
                        .HasColumnName("by_phone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("APMApi.Models.Database.UserModels.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("APMApi.Models.Database.UserModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<Guid?>("PictureId")
                        .HasColumnType("uuid")
                        .HasColumnName("picture_id");

                    b.Property<Guid?>("PictureId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid?>("StripUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("strip_user_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("PictureId");

                    b.HasIndex("PictureId1");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ObjectModelRequest", b =>
                {
                    b.Property<Guid>("ObjectsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequestsId")
                        .HasColumnType("uuid");

                    b.HasKey("ObjectsId", "RequestsId");

                    b.HasIndex("RequestsId");

                    b.ToTable("RequestObjects", (string)null);
                });

            modelBuilder.Entity("ObjectModelUser", b =>
                {
                    b.Property<Guid>("ObjectsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("ObjectsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserObjects", (string)null);
                });

            modelBuilder.Entity("PictureRequest", b =>
                {
                    b.Property<Guid>("PicturesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequestsId")
                        .HasColumnType("uuid");

                    b.HasKey("PicturesId", "RequestsId");

                    b.HasIndex("RequestsId");

                    b.ToTable("RequestPictures", (string)null);
                });

            modelBuilder.Entity("RequestSkill", b =>
                {
                    b.Property<Guid>("RequestsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillsId")
                        .HasColumnType("uuid");

                    b.HasKey("RequestsId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("RequestSkills", (string)null);
                });

            modelBuilder.Entity("SkillUser", b =>
                {
                    b.Property<Guid>("SkillsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("SkillsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserSkills", (string)null);
                });

            modelBuilder.Entity("APMApi.Models.Database.FeedBackModels.FeedBack", b =>
                {
                    b.HasOne("APMApi.Models.Database.UserModels.User", "User")
                        .WithMany("FeedBacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FeedBacks_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APMApi.Models.Database.FeedBackModels.FeedBackApplication", b =>
                {
                    b.HasOne("APMApi.Models.Database.UserModels.User", "User")
                        .WithMany("FeedBackApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FeedBackApplications_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APMApi.Models.Database.FeedBackModels.Issue", b =>
                {
                    b.HasOne("APMApi.Models.Database.UserModels.User", "User")
                        .WithMany("Issues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Issues_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APMApi.Models.Database.RequestModels.Request", b =>
                {
                    b.HasOne("APMApi.Models.Database.RequestModels.Status", "Status")
                        .WithMany("Requests")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_Requests_Statuses");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("APMApi.Models.Database.RequestModels.Response", b =>
                {
                    b.HasOne("APMApi.Models.Database.RequestModels.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Responses_Requests");

                    b.HasOne("APMApi.Models.Database.RequestModels.Request", null)
                        .WithMany("Responses")
                        .HasForeignKey("RequestId1");

                    b.HasOne("APMApi.Models.Database.RequestModels.ResponseStatus", "Status")
                        .WithMany("Responses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_Responses_Statuses");

                    b.HasOne("APMApi.Models.Database.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Responses_Users");

                    b.Navigation("Request");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APMApi.Models.Database.SkillModels.ObjectCategory", b =>
                {
                    b.HasOne("APMApi.Models.Database.SkillModels.ObjectCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ObjectCategories_ObjectCategories");

                    b.HasOne("APMApi.Models.Database.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ObjectCategories_Pictures");

                    b.HasOne("APMApi.Models.Database.Picture", null)
                        .WithMany("ObjectCategories")
                        .HasForeignKey("PictureId1");

                    b.Navigation("Parent");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("APMApi.Models.Database.SkillModels.ObjectModel", b =>
                {
                    b.HasOne("APMApi.Models.Database.SkillModels.ObjectCategory", "Category")
                        .WithMany("Objects")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Objects_ObjectCategories");

                    b.HasOne("APMApi.Models.Database.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Objects_Pictures");

                    b.HasOne("APMApi.Models.Database.Picture", null)
                        .WithMany("Objects")
                        .HasForeignKey("PictureId1");

                    b.Navigation("Category");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("APMApi.Models.Database.SkillModels.Skill", b =>
                {
                    b.HasOne("APMApi.Models.Database.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Skills_Pictures");

                    b.HasOne("APMApi.Models.Database.Picture", null)
                        .WithMany("Skills")
                        .HasForeignKey("PictureId1");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("APMApi.Models.Database.UserModels.Address", b =>
                {
                    b.HasOne("APMApi.Models.Database.UserModels.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Addresses_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APMApi.Models.Database.UserModels.Chat", b =>
                {
                    b.HasOne("APMApi.Models.Database.RequestModels.Response", "Response")
                        .WithOne("Chat")
                        .HasForeignKey("APMApi.Models.Database.UserModels.Chat", "ResponseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_Chats_Responses");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("APMApi.Models.Database.UserModels.Preference", b =>
                {
                    b.HasOne("APMApi.Models.Database.UserModels.User", "User")
                        .WithOne("Preference")
                        .HasForeignKey("APMApi.Models.Database.UserModels.Preference", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Preferences_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APMApi.Models.Database.UserModels.User", b =>
                {
                    b.HasOne("APMApi.Models.Database.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Users_Pictures");

                    b.HasOne("APMApi.Models.Database.Picture", null)
                        .WithMany("Users")
                        .HasForeignKey("PictureId1");

                    b.HasOne("APMApi.Models.Database.UserModels.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("Picture");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ObjectModelRequest", b =>
                {
                    b.HasOne("APMApi.Models.Database.SkillModels.ObjectModel", null)
                        .WithMany()
                        .HasForeignKey("ObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APMApi.Models.Database.RequestModels.Request", null)
                        .WithMany()
                        .HasForeignKey("RequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ObjectModelUser", b =>
                {
                    b.HasOne("APMApi.Models.Database.SkillModels.ObjectModel", null)
                        .WithMany()
                        .HasForeignKey("ObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APMApi.Models.Database.UserModels.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PictureRequest", b =>
                {
                    b.HasOne("APMApi.Models.Database.Picture", null)
                        .WithMany()
                        .HasForeignKey("PicturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APMApi.Models.Database.RequestModels.Request", null)
                        .WithMany()
                        .HasForeignKey("RequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RequestSkill", b =>
                {
                    b.HasOne("APMApi.Models.Database.RequestModels.Request", null)
                        .WithMany()
                        .HasForeignKey("RequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APMApi.Models.Database.SkillModels.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillUser", b =>
                {
                    b.HasOne("APMApi.Models.Database.SkillModels.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APMApi.Models.Database.UserModels.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("APMApi.Models.Database.Picture", b =>
                {
                    b.Navigation("ObjectCategories");

                    b.Navigation("Objects");

                    b.Navigation("Skills");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("APMApi.Models.Database.RequestModels.Request", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("APMApi.Models.Database.RequestModels.Response", b =>
                {
                    b.Navigation("Chat");
                });

            modelBuilder.Entity("APMApi.Models.Database.RequestModels.ResponseStatus", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("APMApi.Models.Database.RequestModels.Status", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("APMApi.Models.Database.SkillModels.ObjectCategory", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Objects");
                });

            modelBuilder.Entity("APMApi.Models.Database.UserModels.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("APMApi.Models.Database.UserModels.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("FeedBackApplications");

                    b.Navigation("FeedBacks");

                    b.Navigation("Issues");

                    b.Navigation("Preference")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
